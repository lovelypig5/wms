{"version":3,"sources":["webpack:///7.dcc97725c9b157ff06ae.js","webpack:///./~/taggle/src/taggle.js?2dbd","webpack:///./js/features/goods/create.vue","webpack:///create.vue","webpack:///./js/features/goods/create.vue?52c4"],"names":["webpackJsonp",9,"module","exports","__webpack_require__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","window","document","_extend","master","arguments","i","l","length","object","key","hasOwnProperty","_isArray","arr","Array","isArray","Object","prototype","toString","call","_on","element","eventName","handler","addEventListener","attachEvent","_trim","str","replace","_setText","el","text","innerText","textContent","noop","DEFAULTS","additionalTagClasses","allowDuplicates","saveOnBlur","duplicateTagClass","containerFocusClass","focusInputOnContainerClick","hiddenInputName","tags","allowedTags","disallowedTags","maxTags","tabIndex","placeholder","submitKeys","preserveCase","tagFormatter","onBeforeTagAdd","onTagAdd","onBeforeTagRemove","onTagRemove","BACKSPACE","COMMA","TAB","ENTER","Taggle","options","this","settings","measurements","container","rect","style","padding","tag","values","elements","list","createElement","inputLi","input","sizer","pasting","getElementById","_getMeasurements","_setupTextarea","_attachEvents","lpad","rpad","getBoundingClientRect","getComputedStyle","parseInt","paddingLeft","paddingRight","fontSize","className","type","len","taggle","_createTag","appendChild","opacity","classList","add","self","focus","_focusInput","bind","_blurEvent","_keydownEvents","_keyupEvents","_fixInputWidth","width","inputRect","leftPos","_setInputWidth","right","left","_canAdd","e","limit","getTagValues","_hasDupes","sensitive","allowed","_tagIsInArray","disallowed","caseSensitive","indexOf","lowercased","slice","apply","map","toLowerCase","_add","value","split","val","_formatTag","forEach","li","lis","children","lastLi","insertBefore","_checkLastTag","event","taggles","querySelectorAll","lastTaggle","hotClass","heldDown","contains","keyCode","remove","_remove","dupes","needle","tagglelist","querySelector","childNodes","_isConfirmKey","confirmKey","_listenForEndOfContainer","_confirmValidTagEvent","metaKey","preventDefault","returnValue","max","size","close","hidden","span","innerHTML","name","formatted","HTMLElement","tagName","Error","push","elem","index","parentNode","removeChild","splice","getTags","getTagElements","getInput","getContainer","isArr","all","found","removeAll","undefined",91,"__vue_script__","__vue_template__","__esModule","template",92,"Vue","$","_interopRequireDefault","obj","default","defineProperty","_stringify","_stringify2","_api","_api2","_alert","_actions","_actions2","_taggle","_taggle2","Create","extend","data","model","loading","create","ready","addClass","methods","$validate","$v","invalid","attr","ajax","url","createGood","success","resp","alert","show","msg","reset","error","responseText","always","$resetValidation","vuex","actions",93],"mappings":"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","file":"7.dcc97725c9b157ff06ae.js","sourcesContent":["webpackJsonp([7],{\n\n/***/ 9:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* !\n\t * @author Sean Coker <sean@seancoker.com>\n\t * @version 1.7.0\n\t * @url http://sean.is/poppin/tags\n\t * @license MIT\n\t * @description Taggle is a dependency-less tagging library\n\t */\n\t\n\t(function(window, document) {\n\t    'use strict';\n\t\n\t    /////////////////////\n\t    // Default options //\n\t    /////////////////////\n\t\n\t    var noop = function() {};\n\t\n\t    var DEFAULTS = {\n\t        /**\n\t         * Class names to be added on each tag entered\n\t         * @type {String}\n\t         */\n\t        additionalTagClasses: '',\n\t\n\t        /**\n\t         * Allow duplicate tags to be entered in the field?\n\t         * @type {Boolean}\n\t         */\n\t        allowDuplicates: false,\n\t\n\t        /**\n\t         * Allow the saving of a tag on blur, rather than it being\n\t         * removed.\n\t         *\n\t         * @type {Boolean}\n\t         */\n\t        saveOnBlur: false,\n\t\n\t        /**\n\t         * Class name that will be added onto duplicate existant tag\n\t         * @type {String}\n\t         * @todo\n\t         * @deprecated\n\t         */\n\t        duplicateTagClass: '',\n\t\n\t        /**\n\t         * Class added to the container div when focused\n\t         * @type {String}\n\t         */\n\t        containerFocusClass: 'active',\n\t\n\t        /**\n\t         * Should the input be focused when the container is clicked?\n\t         * @type {Bool}\n\t         */\n\t        focusInputOnContainerClick: true,\n\t\n\t        /**\n\t         * Name added to the hidden inputs within each tag\n\t         * @type {String}\n\t         */\n\t        hiddenInputName: 'taggles[]',\n\t\n\t        /**\n\t         * Tags that should be preloaded in the div on load\n\t         * @type {Array}\n\t         */\n\t        tags: [],\n\t\n\t        /**\n\t         * Tags that the user will be restricted to\n\t         * @type {Array}\n\t         */\n\t        allowedTags: [],\n\t\n\t        /**\n\t         * Tags that the user will not be able to add\n\t         * @type {Array}\n\t         */\n\t        disallowedTags: [],\n\t\n\t        /**\n\t         * Limit the number of tags that can be added\n\t         * @type {Number}\n\t         */\n\t        maxTags: null,\n\t\n\t        /**\n\t         * If within a form, you can specify the tab index flow\n\t         * @type {Number}\n\t         */\n\t        tabIndex: 1,\n\t\n\t        /**\n\t         * Placeholder string to be placed in an empty taggle field\n\t         * @type {String}\n\t         */\n\t        placeholder: 'Enter tags...',\n\t\n\t        /**\n\t         * Keycodes that will add a tag\n\t         * @type {Array}\n\t         */\n\t        submitKeys: [],\n\t\n\t        /**\n\t         * Preserve case of tags being added ie\n\t         * \"tag\" is different than \"Tag\"\n\t         * @type {Boolean}\n\t         */\n\t        preserveCase: false,\n\t\n\t        /**\n\t         * Function hook called with the to-be-added tag DOM element.\n\t         * Use this function to edit the list item before it is appended\n\t         * to the DOM\n\t         * @param  {HTMLElement} li The list item to be added\n\t         */\n\t        tagFormatter: noop,\n\t\n\t        /**\n\t         * Function hook called before a tag is added. Return false\n\t         * to prevent tag from being added\n\t         * @param  {String} tag The tag to be added\n\t         */\n\t        onBeforeTagAdd: noop,\n\t\n\t        /**\n\t         * Function hook called when a tag is added\n\t         * @param  {Event} event Event triggered when tag was added\n\t         * @param  {String} tag The tag added\n\t         */\n\t        onTagAdd: noop,\n\t\n\t        /**\n\t         * Function hook called before a tag is removed. Return false\n\t         * to prevent tag from being removed\n\t         * @param  {String} tag The tag to be removed\n\t         */\n\t        onBeforeTagRemove: noop,\n\t\n\t        /**\n\t         * Function hook called when a tag is removed\n\t         * @param  {Event} event Event triggered when tag was removed\n\t         * @param  {String} tag The tag removed\n\t         */\n\t        onTagRemove: noop\n\t    };\n\t\n\t    var BACKSPACE = 8;\n\t    var COMMA = 188;\n\t    var TAB = 9;\n\t    var ENTER = 13;\n\t\n\t    //////////////////////\n\t    // Helper functions //\n\t    //////////////////////\n\t\n\t    function _extend() {\n\t        var master = arguments[0];\n\t        for (var i = 1, l = arguments.length; i < l; i++) {\n\t            var object = arguments[i];\n\t            for (var key in object) {\n\t                if (object.hasOwnProperty(key)) {\n\t                    master[key] = object[key];\n\t                }\n\t            }\n\t        }\n\t\n\t        return master;\n\t    }\n\t\n\t    function _isArray(arr) {\n\t        if (Array.isArray) {\n\t            return Array.isArray(arr);\n\t        }\n\t        return Object.prototype.toString.call(arr) === '[object Array]';\n\t    }\n\t\n\t    function _on(element, eventName, handler) {\n\t        if (element.addEventListener) {\n\t            element.addEventListener(eventName, handler, false);\n\t        }\n\t        else if (element.attachEvent) {\n\t            element.attachEvent('on' + eventName, handler);\n\t        }\n\t        else {\n\t            element['on' + eventName] = handler;\n\t        }\n\t    }\n\t\n\t    function _trim(str) {\n\t        return str.replace(/^\\s+|\\s+$/g, '');\n\t    }\n\t\n\t    function _setText(el, text) {\n\t        if (window.attachEvent && !window.addEventListener) { // <= IE8\n\t            el.innerText = text;\n\t        }\n\t        else {\n\t            el.textContent = text;\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Constructor\n\t     * @param {Mixed} el ID of an element or the actual element\n\t     * @param {Object} options\n\t     */\n\t    var Taggle = function(el, options) {\n\t        this.settings = _extend({}, DEFAULTS, options);\n\t        this.measurements = {\n\t            container: {\n\t                rect: null,\n\t                style: null,\n\t                padding: null\n\t            }\n\t        };\n\t        this.container = el;\n\t        this.tag = {\n\t            values: [],\n\t            elements: []\n\t        };\n\t        this.list = document.createElement('ul');\n\t        this.inputLi = document.createElement('li');\n\t        this.input = document.createElement('input');\n\t        this.sizer = document.createElement('div');\n\t        this.pasting = false;\n\t        this.placeholder = null;\n\t\n\t        if (this.settings.placeholder) {\n\t            this.placeholder = document.createElement('span');\n\t        }\n\t\n\t        if (!this.settings.submitKeys.length) {\n\t            this.settings.submitKeys = [COMMA, TAB, ENTER];\n\t        }\n\t\n\t        if (typeof el === 'string') {\n\t            this.container = document.getElementById(el);\n\t        }\n\t\n\t        this._getMeasurements();\n\t        this._setupTextarea();\n\t        this._attachEvents();\n\t    };\n\t\n\t    /**\n\t     * Gets all the layout measurements up front\n\t     */\n\t    Taggle.prototype._getMeasurements = function() {\n\t        var style;\n\t        var lpad;\n\t        var rpad;\n\t\n\t        this.measurements.container.rect = this.container.getBoundingClientRect();\n\t        this.measurements.container.style = window.getComputedStyle(this.container);\n\t\n\t        style = this.measurements.container.style;\n\t        lpad = parseInt(style['padding-left'] || style.paddingLeft, 10);\n\t        rpad = parseInt(style['padding-right'] || style.paddingRight, 10);\n\t\n\t        this.measurements.container.padding = lpad + rpad;\n\t    };\n\t\n\t    /**\n\t     * Setup the div container for tags to be entered\n\t     */\n\t    Taggle.prototype._setupTextarea = function() {\n\t        var fontSize;\n\t\n\t        this.list.className = 'taggle_list';\n\t        this.input.type = 'text';\n\t        this.input.className = 'taggle_input';\n\t        this.input.tabIndex = this.settings.tabIndex;\n\t        this.sizer.className = 'taggle_sizer';\n\t\n\t        if (this.settings.tags.length) {\n\t            for (var i = 0, len = this.settings.tags.length; i < len; i++) {\n\t                var taggle = this._createTag(this.settings.tags[i]);\n\t                this.list.appendChild(taggle);\n\t            }\n\t        }\n\t\n\t        if (this.placeholder) {\n\t            this.placeholder.style.opacity = 0;\n\t            this.placeholder.classList.add('taggle_placeholder');\n\t            this.container.appendChild(this.placeholder);\n\t            _setText(this.placeholder, this.settings.placeholder);\n\t\n\t            if (!this.settings.tags.length) {\n\t                this.placeholder.style.opacity = 1;\n\t            }\n\t        }\n\t\n\t        this.inputLi.appendChild(this.input);\n\t        this.list.appendChild(this.inputLi);\n\t        this.container.appendChild(this.list);\n\t        this.container.appendChild(this.sizer);\n\t        fontSize = window.getComputedStyle(this.input).fontSize;\n\t        this.sizer.style.fontSize = fontSize;\n\t    };\n\t\n\t    /**\n\t     * Attaches neccessary events\n\t     */\n\t    Taggle.prototype._attachEvents = function() {\n\t        var self = this;\n\t\n\t        if (this.settings.focusInputOnContainerClick) {\n\t            _on(this.container, 'click', function() {\n\t                self.input.focus();\n\t            });\n\t        }\n\t\n\t        _on(this.input, 'focus', this._focusInput.bind(this));\n\t        _on(this.input, 'blur', this._blurEvent.bind(this));\n\t        _on(this.input, 'keydown', this._keydownEvents.bind(this));\n\t        _on(this.input, 'keyup', this._keyupEvents.bind(this));\n\t    };\n\t\n\t    /**\n\t     * Resizes the hidden input where user types to fill in the\n\t     * width of the div\n\t     */\n\t    Taggle.prototype._fixInputWidth = function() {\n\t        var width;\n\t        var inputRect;\n\t        var rect;\n\t        var leftPos;\n\t        var padding;\n\t\n\t        // Reset width incase we've broken to the next line on a backspace erase\n\t        this._setInputWidth();\n\t\n\t        inputRect = this.input.getBoundingClientRect();\n\t        rect = this.measurements.container.rect;\n\t        width = ~~rect.width;\n\t        // Could probably just use right - left all the time\n\t        // but eh, this check is mostly for IE8\n\t        if (!width) {\n\t            width = ~~rect.right - ~~rect.left;\n\t        }\n\t        leftPos = ~~inputRect.left - ~~rect.left;\n\t        padding = this.measurements.container.padding;\n\t\n\t        this._setInputWidth(width - leftPos - padding);\n\t    };\n\t\n\t    /**\n\t     * Returns whether or not the specified tag text can be added\n\t     * @param  {Event} e event causing the potentially added tag\n\t     * @param  {String} text tag value\n\t     * @return {Boolean}\n\t     */\n\t    Taggle.prototype._canAdd = function(e, text) {\n\t        if (!text) {\n\t            return false;\n\t        }\n\t        var limit = this.settings.maxTags;\n\t        if (limit !== null && limit <= this.getTagValues().length) {\n\t            return false;\n\t        }\n\t\n\t        if (this.settings.onBeforeTagAdd(e, text) === false) {\n\t            return false;\n\t        }\n\t\n\t        if (!this.settings.allowDuplicates && this._hasDupes(text)) {\n\t            return false;\n\t        }\n\t\n\t        var sensitive = this.settings.preserveCase;\n\t        var allowed = this.settings.allowedTags;\n\t\n\t        if (allowed.length && !this._tagIsInArray(text, allowed, sensitive)) {\n\t            return false;\n\t        }\n\t\n\t        var disallowed = this.settings.disallowedTags;\n\t        if (disallowed.length && this._tagIsInArray(text, disallowed, sensitive)) {\n\t            return false;\n\t        }\n\t\n\t        return true;\n\t    };\n\t\n\t    /**\n\t     * Returns whether a string is in an array based on case sensitivity\n\t     *\n\t     * @param  {String} text string to search for\n\t     * @param  {Array} arr array of strings to search through\n\t     * @param  {Boolean} caseSensitive\n\t     * @return {Boolean}\n\t     */\n\t    Taggle.prototype._tagIsInArray = function(text, arr, caseSensitive) {\n\t        if (caseSensitive) {\n\t            return arr.indexOf(text) !== -1;\n\t        }\n\t\n\t        var lowercased = [].slice.apply(arr).map(function(str) {\n\t            return str.toLowerCase();\n\t        });\n\t\n\t        return lowercased.indexOf(text) !== -1;\n\t    };\n\t\n\t    /**\n\t     * Appends tag with its corresponding input to the list\n\t     * @param  {Event} e\n\t     * @param  {String} text\n\t     */\n\t    Taggle.prototype._add = function(e, text) {\n\t        var self = this;\n\t        var values = text || '';\n\t\n\t        if (typeof text !== 'string') {\n\t            values = _trim(this.input.value);\n\t        }\n\t\n\t        values.split(',').map(function(val) {\n\t            return self._formatTag(val);\n\t        }).forEach(function(val) {\n\t            if (!self._canAdd(e, val)) {\n\t                return;\n\t            }\n\t\n\t            var li = self._createTag(val);\n\t            var lis = self.list.children;\n\t            var lastLi = lis[lis.length - 1];\n\t            self.list.insertBefore(li, lastLi);\n\t\n\t            self.settings.onTagAdd(e, val);\n\t\n\t            self.input.value = '';\n\t            self._setInputWidth();\n\t            self._fixInputWidth();\n\t            self._focusInput();\n\t        });\n\t    };\n\t\n\t    /**\n\t     * Removes last tag if it has already been probed\n\t     * @param  {Event} e\n\t     */\n\t    Taggle.prototype._checkLastTag = function(e) {\n\t        e = e || window.event;\n\t\n\t        var taggles = this.container.querySelectorAll('.taggle');\n\t        var lastTaggle = taggles[taggles.length - 1];\n\t        var hotClass = 'taggle_hot';\n\t        var heldDown = this.input.classList.contains('taggle_back');\n\t\n\t        // prevent holding backspace from deleting all tags\n\t        if (this.input.value === '' && e.keyCode === BACKSPACE && !heldDown) {\n\t            if (lastTaggle.classList.contains(hotClass)) {\n\t                this.input.classList.add('taggle_back');\n\t                this._remove(lastTaggle, e);\n\t                this._fixInputWidth();\n\t                this._focusInput();\n\t            }\n\t            else {\n\t                lastTaggle.classList.add(hotClass);\n\t            }\n\t        }\n\t        else if (lastTaggle.classList.contains(hotClass)) {\n\t            lastTaggle.classList.remove(hotClass);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Setter for the hidden input.\n\t     * @param {Number} width\n\t     */\n\t    Taggle.prototype._setInputWidth = function(width) {\n\t        this.input.style.width = (width || 10) + 'px';\n\t    };\n\t\n\t    /**\n\t     * Checks global tags array if provided tag exists\n\t     * @param  {String} text\n\t     * @return {Boolean}\n\t     */\n\t    Taggle.prototype._hasDupes = function(text) {\n\t        var needle = this.tag.values.indexOf(text);\n\t        var tagglelist = this.container.querySelector('.taggle_list');\n\t        var dupes;\n\t\n\t        if (this.settings.duplicateTagClass) {\n\t            dupes = tagglelist.querySelectorAll('.' + this.settings.duplicateTagClass);\n\t            for (var i = 0, len = dupes.length; i < len; i++) {\n\t                dupes[i].classList.remove(this.settings.duplicateTagClass);\n\t            }\n\t        }\n\t\n\t        // if found\n\t        if (needle > -1) {\n\t            if (this.settings.duplicateTagClass) {\n\t                tagglelist.childNodes[needle].classList.add(this.settings.duplicateTagClass);\n\t            }\n\t            return true;\n\t        }\n\t\n\t        return false;\n\t    };\n\t\n\t    /**\n\t     * Checks whether or not the key pressed is acceptable\n\t     * @param  {Number}  key code\n\t     * @return {Boolean}\n\t     */\n\t    Taggle.prototype._isConfirmKey = function(key) {\n\t        var confirmKey = false;\n\t\n\t        if (this.settings.submitKeys.indexOf(key) > -1) {\n\t            confirmKey = true;\n\t        }\n\t\n\t        return confirmKey;\n\t    };\n\t\n\t    // Event handlers\n\t\n\t    /**\n\t     * Handles focus state of div container.\n\t     */\n\t    Taggle.prototype._focusInput = function() {\n\t        this._fixInputWidth();\n\t\n\t        if (!this.container.classList.contains(this.settings.containerFocusClass)) {\n\t            this.container.classList.add(this.settings.containerFocusClass);\n\t        }\n\t\n\t        if (this.placeholder) {\n\t            this.placeholder.style.opacity = 0;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Runs all the events that need to happen on a blur\n\t     * @param  {Event} e\n\t     */\n\t    Taggle.prototype._blurEvent = function(e) {\n\t        if (this.container.classList.contains(this.settings.containerFocusClass)) {\n\t            this.container.classList.remove(this.settings.containerFocusClass);\n\t        }\n\t\n\t        if (!this.tag.values.length && this.placeholder) {\n\t            this.placeholder.style.opacity = 1;\n\t        }\n\t\n\t        if (this.settings.saveOnBlur) {\n\t            e = e || window.event;\n\t\n\t            this._listenForEndOfContainer();\n\t\n\t            if (this.input.value !== '') {\n\t                this._confirmValidTagEvent(e);\n\t                return;\n\t            }\n\t\n\t            if (this.tag.values.length) {\n\t                this._checkLastTag(e);\n\t            }\n\t        }\n\t        else {\n\t            this.input.value = '';\n\t            this._setInputWidth();\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Runs all the events that need to run on keydown\n\t     * @param  {Event} e\n\t     */\n\t    Taggle.prototype._keydownEvents = function(e) {\n\t        e = e || window.event;\n\t\n\t        var key = e.keyCode;\n\t        this.pasting = false;\n\t\n\t        this._listenForEndOfContainer();\n\t\n\t        if (key === 86 && e.metaKey) {\n\t            this.pasting = true;\n\t        }\n\t\n\t        if (this._isConfirmKey(key) && this.input.value !== '') {\n\t            this._confirmValidTagEvent(e);\n\t            return;\n\t        }\n\t\n\t        if (this.tag.values.length) {\n\t            this._checkLastTag(e);\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Runs all the events that need to run on keyup\n\t     * @param  {Event} e\n\t     */\n\t    Taggle.prototype._keyupEvents = function(e) {\n\t        e = e || window.event;\n\t\n\t        this.input.classList.remove('taggle_back');\n\t\n\t        _setText(this.sizer, this.input.value);\n\t\n\t        if (this.pasting && this.input.value !== '') {\n\t            this._add(e);\n\t            this.pasting = false;\n\t        }\n\t    };\n\t\n\t    /**\n\t     * Confirms the inputted value to be converted to a tag\n\t     * @param  {Event} e\n\t     */\n\t    Taggle.prototype._confirmValidTagEvent = function(e) {\n\t        e = e || window.event;\n\t\n\t        // prevents from jumping out of textarea\n\t        if (e.preventDefault) {\n\t            e.preventDefault();\n\t        }\n\t        else {\n\t            e.returnValue = false;\n\t        }\n\t\n\t        this._add(e);\n\t    };\n\t\n\t    /**\n\t     * Approximates when the hidden input should break to the next line\n\t     */\n\t    Taggle.prototype._listenForEndOfContainer = function() {\n\t        var width = this.sizer.getBoundingClientRect().width;\n\t        var max = this.measurements.container.rect.width - this.measurements.container.padding;\n\t        var size = parseInt(this.sizer.style.fontSize, 10);\n\t\n\t        // 1.5 just seems to be a good multiplier here\n\t        if (width + (size * 1.5) > parseInt(this.input.style.width, 10)) {\n\t            this.input.style.width = max + 'px';\n\t        }\n\t    };\n\t\n\t    Taggle.prototype._createTag = function(text) {\n\t        var li = document.createElement('li');\n\t        var close = document.createElement('button');\n\t        var hidden = document.createElement('input');\n\t        var span = document.createElement('span');\n\t\n\t        text = this._formatTag(text);\n\t\n\t        close.innerHTML = '&times;';\n\t        close.className = 'close';\n\t        _on(close, 'click', this._remove.bind(this, close));\n\t\n\t        _setText(span, text);\n\t        span.className = 'taggle_text';\n\t\n\t        li.className = 'taggle ' + this.settings.additionalTagClasses;\n\t\n\t        hidden.type = 'hidden';\n\t        hidden.value = text;\n\t        hidden.name = this.settings.hiddenInputName;\n\t\n\t        li.appendChild(span);\n\t        li.appendChild(close);\n\t        li.appendChild(hidden);\n\t\n\t        var formatted = this.settings.tagFormatter(li);\n\t\n\t        if (typeof formatted !== 'undefined') {\n\t            li = formatted;\n\t        }\n\t\n\t        if (!(li instanceof HTMLElement) || li.tagName !== 'LI') {\n\t            throw new Error('tagFormatter must return an li element');\n\t        }\n\t\n\t        this.tag.values.push(text);\n\t        this.tag.elements.push(li);\n\t\n\t        return li;\n\t    };\n\t\n\t    /**\n\t     * Removes tag from the tags collection\n\t     * @param  {li} li List item to remove\n\t     * @param  {Event} e\n\t     */\n\t    Taggle.prototype._remove = function(li, e) {\n\t        var span;\n\t        var text;\n\t        var elem;\n\t        var index;\n\t\n\t        if (li.tagName.toLowerCase() !== 'li') {\n\t            li = li.parentNode;\n\t        }\n\t\n\t        span = li.querySelector('.taggle_text');\n\t        text = span.innerText || span.textContent;\n\t\n\t        if (this.settings.onBeforeTagRemove(e, text) === false) {\n\t            return;\n\t        }\n\t\n\t        li.parentNode.removeChild(li);\n\t\n\t        elem = (li.tagName.toLowerCase() === 'a') ? li.parentNode : li;\n\t        index = this.tag.elements.indexOf(elem);\n\t\n\t        // Going to assume the indicies match for now\n\t        this.tag.elements.splice(index, 1);\n\t        this.tag.values.splice(index, 1);\n\t\n\t        this.settings.onTagRemove(e, text);\n\t\n\t        this._focusInput();\n\t    };\n\t\n\t    /**\n\t     * Format the text for a tag\n\t     * @param {String} text Tag text\n\t     * @return {String}\n\t     */\n\t    Taggle.prototype._formatTag = function(text) {\n\t        return this.settings.preserveCase ? text : text.toLowerCase();\n\t    };\n\t\n\t    Taggle.prototype.getTags = function() {\n\t        return {\n\t            elements: this.getTagElements(),\n\t            values: this.getTagValues()\n\t        };\n\t    };\n\t\n\t    // @todo\n\t    // @deprecated\n\t    Taggle.prototype.getTagElements = function() {\n\t        return this.tag.elements;\n\t    };\n\t\n\t    // @todo\n\t    // @deprecated\n\t    Taggle.prototype.getTagValues = function() {\n\t        return [].slice.apply(this.tag.values);\n\t    };\n\t\n\t    Taggle.prototype.getInput = function() {\n\t        return this.input;\n\t    };\n\t\n\t    Taggle.prototype.getContainer = function() {\n\t        return this.container;\n\t    };\n\t\n\t    Taggle.prototype.add = function(text) {\n\t        var isArr = _isArray(text);\n\t\n\t        if (isArr) {\n\t            for (var i = 0, len = text.length; i < len; i++) {\n\t                if (typeof text[i] === 'string') {\n\t                    this._add(null, text[i]);\n\t                }\n\t            }\n\t        }\n\t        else {\n\t            this._add(null, text);\n\t        }\n\t\n\t        return this;\n\t    };\n\t\n\t    Taggle.prototype.remove = function(text, all) {\n\t        var len = this.tag.values.length - 1;\n\t        var found = false;\n\t\n\t        while (len > -1) {\n\t            if (this.tag.values[len] === text) {\n\t                found = true;\n\t                this._remove(this.tag.elements[len]);\n\t            }\n\t\n\t            if (found && !all) {\n\t                break;\n\t            }\n\t\n\t            len--;\n\t        }\n\t\n\t        return this;\n\t    };\n\t\n\t    Taggle.prototype.removeAll = function() {\n\t        for (var i = this.tag.values.length - 1; i >= 0; i--) {\n\t            this._remove(this.tag.elements[i]);\n\t        }\n\t\n\t        return this;\n\t    };\n\t\n\t    /* global define, module */\n\t    if (true) {\n\t        // AMD\n\t        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t            return Taggle;\n\t        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    }\n\t    else if (typeof exports === 'object') {\n\t        // CommonJS\n\t        module.exports = Taggle;\n\t    }\n\t    else {\n\t        // Vanilla browser global\n\t        window.Taggle = Taggle;\n\t    }\n\t\n\t}(window, document));\n\n\n/***/ },\n\n/***/ 91:\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __vue_script__, __vue_template__\n\t__vue_script__ = __webpack_require__(92)\n\t__vue_template__ = __webpack_require__(93)\n\tmodule.exports = __vue_script__ || {}\n\tif (module.exports.__esModule) module.exports = module.exports.default\n\tif (__vue_template__) {\n\t(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n\t}\n\n\n/***/ },\n\n/***/ 92:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Vue, $) {'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _stringify = __webpack_require__(56);\n\t\n\tvar _stringify2 = _interopRequireDefault(_stringify);\n\t\n\tvar _api = __webpack_require__(51);\n\t\n\tvar _api2 = _interopRequireDefault(_api);\n\t\n\tvar _alert = __webpack_require__(68);\n\t\n\tvar _alert2 = _interopRequireDefault(_alert);\n\t\n\tvar _actions = __webpack_require__(48);\n\t\n\tvar _actions2 = _interopRequireDefault(_actions);\n\t\n\tvar _taggle = __webpack_require__(9);\n\t\n\tvar _taggle2 = _interopRequireDefault(_taggle);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t// <template>\n\t//     <div class=\"panel panel-primary good-create\">\n\t//         <div class=\"panel-heading\">添加商品</div>\n\t//         <div class=\"panel-body\">\n\t//             <validator name=\"v\">\n\t//                 <div class=\"input-group\">\n\t//                     <span class=\"input-group-addon\" id=\"productName\">商品名称</span>\n\t//                     <input type=\"text\" class=\"form-control\" placeholder=\"请输入商品名称\" aria-describedby=\"productName\" v-model=\"model.name\" v-validate:name=\"{required:true}\" :class=\"{'red-border': $v.name && $v.name.touched && $v.name.invalid}\">\n\t//                 </div>\n\t//                 <div class=\"input-group error-msg\" v-if=\"$v.name.touched && $v.name.invalid\">\n\t//                     <div v-if=\"$v.name.required\" class=\"red-color\">商品名称不能为空</div>\n\t//                 </div>\n\t//                 <div class=\"input-group\">\n\t//                     <span class=\"input-group-addon\">商品属性</span>\n\t//                     <div id=\"productAttr\" class=\"productAttr\"></div>\n\t//                 </div>\n\t//                 <div class=\"input-group\">\n\t//                     <span class=\"input-group-addon\" id=\"productAmount\">商品链接</span>\n\t//                     <input type=\"text\" class=\"form-control\" placeholder=\"请输入商品链接（选填）\" aria-describedby=\"productAmount\" v-model=\"model.amount\">\n\t//                 </div>\n\t//                 <div class=\"float-right btns\">\n\t//                     <button type=\"button\" class=\"btn btn-primary\" @click=\"create\">添加</button>\n\t//                     <button type=\"button\" class=\"btn btn-danger\" @click=\"reset\">取消</button>\n\t//                 </div>\n\t//             </validator>\n\t//         </div>\n\t//     </div>\n\t// </template>\n\t// <script>\n\t\n\t\n\tvar Create = Vue.extend({\n\t    name: 'create',\n\t    data: function data() {\n\t        return {\n\t            model: {\n\t                name: \"\"\n\t            },\n\t            loading: {\n\t                create: false\n\t            }\n\t        };\n\t    },\n\t    ready: function ready() {\n\t        this.taggle = new _taggle2.default('productAttr', {\n\t            placeholder: '请输入商品属性（选填）（Enter键确认）'\n\t        });\n\t        // workaround\n\t        $('#productAttr').addClass('relative');\n\t    },\n\t\n\t    methods: {\n\t        create: function create() {\n\t            var self = this;\n\t            self.$validate(true);\n\t            if (self.$v.invalid) {\n\t                return;\n\t            }\n\t            if (self.loading.create) {\n\t                return;\n\t            }\n\t            self.loading.create = !self.loading.create;\n\t\n\t            var values = self.taggle.getTagValues();\n\t            if (values.length > 0) {\n\t                self.model.attr = values;\n\t            }\n\t\n\t            $.ajax({\n\t                url: _api2.default.createGood,\n\t                type: 'post',\n\t                data: (0, _stringify2.default)(self.model),\n\t                success: function success(resp) {\n\t                    self.alert({\n\t                        show: true,\n\t                        msg: '添加成功',\n\t                        type: 'success'\n\t                    });\n\t                    self.reset();\n\t                },\n\t                error: function error(resp) {\n\t                    self.alert({\n\t                        show: true,\n\t                        msg: resp.responseText || '添加失败',\n\t                        type: 'error'\n\t                    });\n\t                }\n\t            }).always(function () {\n\t                self.loading.create = !self.loading.create;\n\t            });\n\t        },\n\t        reset: function reset() {\n\t            this.model = {\n\t                name: \"\"\n\t            };\n\t            this.$resetValidation();\n\t            this.taggle.removeAll();\n\t        }\n\t    },\n\t    vuex: {\n\t        actions: {\n\t            alert: _actions2.default.alert\n\t        }\n\t    }\n\t});\n\texports.default = Create;\n\t// </script>\n\t/* generated by vue-loader */\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(8), __webpack_require__(7)))\n\n/***/ },\n\n/***/ 93:\n/***/ function(module, exports) {\n\n\tmodule.exports = \"<div class=\\\"panel panel-primary good-create\\\"> <div class=panel-heading>添加商品</div> <div class=panel-body> <validator name=v> <div class=input-group> <span class=input-group-addon id=productName>商品名称</span> <input type=text class=form-control placeholder=请输入商品名称 aria-describedby=productName v-model=model.name v-validate:name={required:true} :class=\\\"{'red-border': $v.name && $v.name.touched && $v.name.invalid}\\\"> </div> <div class=\\\"input-group error-msg\\\" v-if=\\\"$v.name.touched && $v.name.invalid\\\"> <div v-if=$v.name.required class=red-color>商品名称不能为空</div> </div> <div class=input-group> <span class=input-group-addon>商品属性</span> <div id=productAttr class=productAttr></div> </div> <div class=input-group> <span class=input-group-addon id=productAmount>商品链接</span> <input type=text class=form-control placeholder=请输入商品链接（选填） aria-describedby=productAmount v-model=model.amount> </div> <div class=\\\"float-right btns\\\"> <button type=button class=\\\"btn btn-primary\\\" @click=create>添加</button> <button type=button class=\\\"btn btn-danger\\\" @click=reset>取消</button> </div> </validator> </div> </div>\";\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** 7.dcc97725c9b157ff06ae.js\n **/","/* !\n * @author Sean Coker <sean@seancoker.com>\n * @version 1.7.0\n * @url http://sean.is/poppin/tags\n * @license MIT\n * @description Taggle is a dependency-less tagging library\n */\n\n(function(window, document) {\n    'use strict';\n\n    /////////////////////\n    // Default options //\n    /////////////////////\n\n    var noop = function() {};\n\n    var DEFAULTS = {\n        /**\n         * Class names to be added on each tag entered\n         * @type {String}\n         */\n        additionalTagClasses: '',\n\n        /**\n         * Allow duplicate tags to be entered in the field?\n         * @type {Boolean}\n         */\n        allowDuplicates: false,\n\n        /**\n         * Allow the saving of a tag on blur, rather than it being\n         * removed.\n         *\n         * @type {Boolean}\n         */\n        saveOnBlur: false,\n\n        /**\n         * Class name that will be added onto duplicate existant tag\n         * @type {String}\n         * @todo\n         * @deprecated\n         */\n        duplicateTagClass: '',\n\n        /**\n         * Class added to the container div when focused\n         * @type {String}\n         */\n        containerFocusClass: 'active',\n\n        /**\n         * Should the input be focused when the container is clicked?\n         * @type {Bool}\n         */\n        focusInputOnContainerClick: true,\n\n        /**\n         * Name added to the hidden inputs within each tag\n         * @type {String}\n         */\n        hiddenInputName: 'taggles[]',\n\n        /**\n         * Tags that should be preloaded in the div on load\n         * @type {Array}\n         */\n        tags: [],\n\n        /**\n         * Tags that the user will be restricted to\n         * @type {Array}\n         */\n        allowedTags: [],\n\n        /**\n         * Tags that the user will not be able to add\n         * @type {Array}\n         */\n        disallowedTags: [],\n\n        /**\n         * Limit the number of tags that can be added\n         * @type {Number}\n         */\n        maxTags: null,\n\n        /**\n         * If within a form, you can specify the tab index flow\n         * @type {Number}\n         */\n        tabIndex: 1,\n\n        /**\n         * Placeholder string to be placed in an empty taggle field\n         * @type {String}\n         */\n        placeholder: 'Enter tags...',\n\n        /**\n         * Keycodes that will add a tag\n         * @type {Array}\n         */\n        submitKeys: [],\n\n        /**\n         * Preserve case of tags being added ie\n         * \"tag\" is different than \"Tag\"\n         * @type {Boolean}\n         */\n        preserveCase: false,\n\n        /**\n         * Function hook called with the to-be-added tag DOM element.\n         * Use this function to edit the list item before it is appended\n         * to the DOM\n         * @param  {HTMLElement} li The list item to be added\n         */\n        tagFormatter: noop,\n\n        /**\n         * Function hook called before a tag is added. Return false\n         * to prevent tag from being added\n         * @param  {String} tag The tag to be added\n         */\n        onBeforeTagAdd: noop,\n\n        /**\n         * Function hook called when a tag is added\n         * @param  {Event} event Event triggered when tag was added\n         * @param  {String} tag The tag added\n         */\n        onTagAdd: noop,\n\n        /**\n         * Function hook called before a tag is removed. Return false\n         * to prevent tag from being removed\n         * @param  {String} tag The tag to be removed\n         */\n        onBeforeTagRemove: noop,\n\n        /**\n         * Function hook called when a tag is removed\n         * @param  {Event} event Event triggered when tag was removed\n         * @param  {String} tag The tag removed\n         */\n        onTagRemove: noop\n    };\n\n    var BACKSPACE = 8;\n    var COMMA = 188;\n    var TAB = 9;\n    var ENTER = 13;\n\n    //////////////////////\n    // Helper functions //\n    //////////////////////\n\n    function _extend() {\n        var master = arguments[0];\n        for (var i = 1, l = arguments.length; i < l; i++) {\n            var object = arguments[i];\n            for (var key in object) {\n                if (object.hasOwnProperty(key)) {\n                    master[key] = object[key];\n                }\n            }\n        }\n\n        return master;\n    }\n\n    function _isArray(arr) {\n        if (Array.isArray) {\n            return Array.isArray(arr);\n        }\n        return Object.prototype.toString.call(arr) === '[object Array]';\n    }\n\n    function _on(element, eventName, handler) {\n        if (element.addEventListener) {\n            element.addEventListener(eventName, handler, false);\n        }\n        else if (element.attachEvent) {\n            element.attachEvent('on' + eventName, handler);\n        }\n        else {\n            element['on' + eventName] = handler;\n        }\n    }\n\n    function _trim(str) {\n        return str.replace(/^\\s+|\\s+$/g, '');\n    }\n\n    function _setText(el, text) {\n        if (window.attachEvent && !window.addEventListener) { // <= IE8\n            el.innerText = text;\n        }\n        else {\n            el.textContent = text;\n        }\n    }\n\n    /**\n     * Constructor\n     * @param {Mixed} el ID of an element or the actual element\n     * @param {Object} options\n     */\n    var Taggle = function(el, options) {\n        this.settings = _extend({}, DEFAULTS, options);\n        this.measurements = {\n            container: {\n                rect: null,\n                style: null,\n                padding: null\n            }\n        };\n        this.container = el;\n        this.tag = {\n            values: [],\n            elements: []\n        };\n        this.list = document.createElement('ul');\n        this.inputLi = document.createElement('li');\n        this.input = document.createElement('input');\n        this.sizer = document.createElement('div');\n        this.pasting = false;\n        this.placeholder = null;\n\n        if (this.settings.placeholder) {\n            this.placeholder = document.createElement('span');\n        }\n\n        if (!this.settings.submitKeys.length) {\n            this.settings.submitKeys = [COMMA, TAB, ENTER];\n        }\n\n        if (typeof el === 'string') {\n            this.container = document.getElementById(el);\n        }\n\n        this._getMeasurements();\n        this._setupTextarea();\n        this._attachEvents();\n    };\n\n    /**\n     * Gets all the layout measurements up front\n     */\n    Taggle.prototype._getMeasurements = function() {\n        var style;\n        var lpad;\n        var rpad;\n\n        this.measurements.container.rect = this.container.getBoundingClientRect();\n        this.measurements.container.style = window.getComputedStyle(this.container);\n\n        style = this.measurements.container.style;\n        lpad = parseInt(style['padding-left'] || style.paddingLeft, 10);\n        rpad = parseInt(style['padding-right'] || style.paddingRight, 10);\n\n        this.measurements.container.padding = lpad + rpad;\n    };\n\n    /**\n     * Setup the div container for tags to be entered\n     */\n    Taggle.prototype._setupTextarea = function() {\n        var fontSize;\n\n        this.list.className = 'taggle_list';\n        this.input.type = 'text';\n        this.input.className = 'taggle_input';\n        this.input.tabIndex = this.settings.tabIndex;\n        this.sizer.className = 'taggle_sizer';\n\n        if (this.settings.tags.length) {\n            for (var i = 0, len = this.settings.tags.length; i < len; i++) {\n                var taggle = this._createTag(this.settings.tags[i]);\n                this.list.appendChild(taggle);\n            }\n        }\n\n        if (this.placeholder) {\n            this.placeholder.style.opacity = 0;\n            this.placeholder.classList.add('taggle_placeholder');\n            this.container.appendChild(this.placeholder);\n            _setText(this.placeholder, this.settings.placeholder);\n\n            if (!this.settings.tags.length) {\n                this.placeholder.style.opacity = 1;\n            }\n        }\n\n        this.inputLi.appendChild(this.input);\n        this.list.appendChild(this.inputLi);\n        this.container.appendChild(this.list);\n        this.container.appendChild(this.sizer);\n        fontSize = window.getComputedStyle(this.input).fontSize;\n        this.sizer.style.fontSize = fontSize;\n    };\n\n    /**\n     * Attaches neccessary events\n     */\n    Taggle.prototype._attachEvents = function() {\n        var self = this;\n\n        if (this.settings.focusInputOnContainerClick) {\n            _on(this.container, 'click', function() {\n                self.input.focus();\n            });\n        }\n\n        _on(this.input, 'focus', this._focusInput.bind(this));\n        _on(this.input, 'blur', this._blurEvent.bind(this));\n        _on(this.input, 'keydown', this._keydownEvents.bind(this));\n        _on(this.input, 'keyup', this._keyupEvents.bind(this));\n    };\n\n    /**\n     * Resizes the hidden input where user types to fill in the\n     * width of the div\n     */\n    Taggle.prototype._fixInputWidth = function() {\n        var width;\n        var inputRect;\n        var rect;\n        var leftPos;\n        var padding;\n\n        // Reset width incase we've broken to the next line on a backspace erase\n        this._setInputWidth();\n\n        inputRect = this.input.getBoundingClientRect();\n        rect = this.measurements.container.rect;\n        width = ~~rect.width;\n        // Could probably just use right - left all the time\n        // but eh, this check is mostly for IE8\n        if (!width) {\n            width = ~~rect.right - ~~rect.left;\n        }\n        leftPos = ~~inputRect.left - ~~rect.left;\n        padding = this.measurements.container.padding;\n\n        this._setInputWidth(width - leftPos - padding);\n    };\n\n    /**\n     * Returns whether or not the specified tag text can be added\n     * @param  {Event} e event causing the potentially added tag\n     * @param  {String} text tag value\n     * @return {Boolean}\n     */\n    Taggle.prototype._canAdd = function(e, text) {\n        if (!text) {\n            return false;\n        }\n        var limit = this.settings.maxTags;\n        if (limit !== null && limit <= this.getTagValues().length) {\n            return false;\n        }\n\n        if (this.settings.onBeforeTagAdd(e, text) === false) {\n            return false;\n        }\n\n        if (!this.settings.allowDuplicates && this._hasDupes(text)) {\n            return false;\n        }\n\n        var sensitive = this.settings.preserveCase;\n        var allowed = this.settings.allowedTags;\n\n        if (allowed.length && !this._tagIsInArray(text, allowed, sensitive)) {\n            return false;\n        }\n\n        var disallowed = this.settings.disallowedTags;\n        if (disallowed.length && this._tagIsInArray(text, disallowed, sensitive)) {\n            return false;\n        }\n\n        return true;\n    };\n\n    /**\n     * Returns whether a string is in an array based on case sensitivity\n     *\n     * @param  {String} text string to search for\n     * @param  {Array} arr array of strings to search through\n     * @param  {Boolean} caseSensitive\n     * @return {Boolean}\n     */\n    Taggle.prototype._tagIsInArray = function(text, arr, caseSensitive) {\n        if (caseSensitive) {\n            return arr.indexOf(text) !== -1;\n        }\n\n        var lowercased = [].slice.apply(arr).map(function(str) {\n            return str.toLowerCase();\n        });\n\n        return lowercased.indexOf(text) !== -1;\n    };\n\n    /**\n     * Appends tag with its corresponding input to the list\n     * @param  {Event} e\n     * @param  {String} text\n     */\n    Taggle.prototype._add = function(e, text) {\n        var self = this;\n        var values = text || '';\n\n        if (typeof text !== 'string') {\n            values = _trim(this.input.value);\n        }\n\n        values.split(',').map(function(val) {\n            return self._formatTag(val);\n        }).forEach(function(val) {\n            if (!self._canAdd(e, val)) {\n                return;\n            }\n\n            var li = self._createTag(val);\n            var lis = self.list.children;\n            var lastLi = lis[lis.length - 1];\n            self.list.insertBefore(li, lastLi);\n\n            self.settings.onTagAdd(e, val);\n\n            self.input.value = '';\n            self._setInputWidth();\n            self._fixInputWidth();\n            self._focusInput();\n        });\n    };\n\n    /**\n     * Removes last tag if it has already been probed\n     * @param  {Event} e\n     */\n    Taggle.prototype._checkLastTag = function(e) {\n        e = e || window.event;\n\n        var taggles = this.container.querySelectorAll('.taggle');\n        var lastTaggle = taggles[taggles.length - 1];\n        var hotClass = 'taggle_hot';\n        var heldDown = this.input.classList.contains('taggle_back');\n\n        // prevent holding backspace from deleting all tags\n        if (this.input.value === '' && e.keyCode === BACKSPACE && !heldDown) {\n            if (lastTaggle.classList.contains(hotClass)) {\n                this.input.classList.add('taggle_back');\n                this._remove(lastTaggle, e);\n                this._fixInputWidth();\n                this._focusInput();\n            }\n            else {\n                lastTaggle.classList.add(hotClass);\n            }\n        }\n        else if (lastTaggle.classList.contains(hotClass)) {\n            lastTaggle.classList.remove(hotClass);\n        }\n    };\n\n    /**\n     * Setter for the hidden input.\n     * @param {Number} width\n     */\n    Taggle.prototype._setInputWidth = function(width) {\n        this.input.style.width = (width || 10) + 'px';\n    };\n\n    /**\n     * Checks global tags array if provided tag exists\n     * @param  {String} text\n     * @return {Boolean}\n     */\n    Taggle.prototype._hasDupes = function(text) {\n        var needle = this.tag.values.indexOf(text);\n        var tagglelist = this.container.querySelector('.taggle_list');\n        var dupes;\n\n        if (this.settings.duplicateTagClass) {\n            dupes = tagglelist.querySelectorAll('.' + this.settings.duplicateTagClass);\n            for (var i = 0, len = dupes.length; i < len; i++) {\n                dupes[i].classList.remove(this.settings.duplicateTagClass);\n            }\n        }\n\n        // if found\n        if (needle > -1) {\n            if (this.settings.duplicateTagClass) {\n                tagglelist.childNodes[needle].classList.add(this.settings.duplicateTagClass);\n            }\n            return true;\n        }\n\n        return false;\n    };\n\n    /**\n     * Checks whether or not the key pressed is acceptable\n     * @param  {Number}  key code\n     * @return {Boolean}\n     */\n    Taggle.prototype._isConfirmKey = function(key) {\n        var confirmKey = false;\n\n        if (this.settings.submitKeys.indexOf(key) > -1) {\n            confirmKey = true;\n        }\n\n        return confirmKey;\n    };\n\n    // Event handlers\n\n    /**\n     * Handles focus state of div container.\n     */\n    Taggle.prototype._focusInput = function() {\n        this._fixInputWidth();\n\n        if (!this.container.classList.contains(this.settings.containerFocusClass)) {\n            this.container.classList.add(this.settings.containerFocusClass);\n        }\n\n        if (this.placeholder) {\n            this.placeholder.style.opacity = 0;\n        }\n    };\n\n    /**\n     * Runs all the events that need to happen on a blur\n     * @param  {Event} e\n     */\n    Taggle.prototype._blurEvent = function(e) {\n        if (this.container.classList.contains(this.settings.containerFocusClass)) {\n            this.container.classList.remove(this.settings.containerFocusClass);\n        }\n\n        if (!this.tag.values.length && this.placeholder) {\n            this.placeholder.style.opacity = 1;\n        }\n\n        if (this.settings.saveOnBlur) {\n            e = e || window.event;\n\n            this._listenForEndOfContainer();\n\n            if (this.input.value !== '') {\n                this._confirmValidTagEvent(e);\n                return;\n            }\n\n            if (this.tag.values.length) {\n                this._checkLastTag(e);\n            }\n        }\n        else {\n            this.input.value = '';\n            this._setInputWidth();\n        }\n    };\n\n    /**\n     * Runs all the events that need to run on keydown\n     * @param  {Event} e\n     */\n    Taggle.prototype._keydownEvents = function(e) {\n        e = e || window.event;\n\n        var key = e.keyCode;\n        this.pasting = false;\n\n        this._listenForEndOfContainer();\n\n        if (key === 86 && e.metaKey) {\n            this.pasting = true;\n        }\n\n        if (this._isConfirmKey(key) && this.input.value !== '') {\n            this._confirmValidTagEvent(e);\n            return;\n        }\n\n        if (this.tag.values.length) {\n            this._checkLastTag(e);\n        }\n    };\n\n    /**\n     * Runs all the events that need to run on keyup\n     * @param  {Event} e\n     */\n    Taggle.prototype._keyupEvents = function(e) {\n        e = e || window.event;\n\n        this.input.classList.remove('taggle_back');\n\n        _setText(this.sizer, this.input.value);\n\n        if (this.pasting && this.input.value !== '') {\n            this._add(e);\n            this.pasting = false;\n        }\n    };\n\n    /**\n     * Confirms the inputted value to be converted to a tag\n     * @param  {Event} e\n     */\n    Taggle.prototype._confirmValidTagEvent = function(e) {\n        e = e || window.event;\n\n        // prevents from jumping out of textarea\n        if (e.preventDefault) {\n            e.preventDefault();\n        }\n        else {\n            e.returnValue = false;\n        }\n\n        this._add(e);\n    };\n\n    /**\n     * Approximates when the hidden input should break to the next line\n     */\n    Taggle.prototype._listenForEndOfContainer = function() {\n        var width = this.sizer.getBoundingClientRect().width;\n        var max = this.measurements.container.rect.width - this.measurements.container.padding;\n        var size = parseInt(this.sizer.style.fontSize, 10);\n\n        // 1.5 just seems to be a good multiplier here\n        if (width + (size * 1.5) > parseInt(this.input.style.width, 10)) {\n            this.input.style.width = max + 'px';\n        }\n    };\n\n    Taggle.prototype._createTag = function(text) {\n        var li = document.createElement('li');\n        var close = document.createElement('button');\n        var hidden = document.createElement('input');\n        var span = document.createElement('span');\n\n        text = this._formatTag(text);\n\n        close.innerHTML = '&times;';\n        close.className = 'close';\n        _on(close, 'click', this._remove.bind(this, close));\n\n        _setText(span, text);\n        span.className = 'taggle_text';\n\n        li.className = 'taggle ' + this.settings.additionalTagClasses;\n\n        hidden.type = 'hidden';\n        hidden.value = text;\n        hidden.name = this.settings.hiddenInputName;\n\n        li.appendChild(span);\n        li.appendChild(close);\n        li.appendChild(hidden);\n\n        var formatted = this.settings.tagFormatter(li);\n\n        if (typeof formatted !== 'undefined') {\n            li = formatted;\n        }\n\n        if (!(li instanceof HTMLElement) || li.tagName !== 'LI') {\n            throw new Error('tagFormatter must return an li element');\n        }\n\n        this.tag.values.push(text);\n        this.tag.elements.push(li);\n\n        return li;\n    };\n\n    /**\n     * Removes tag from the tags collection\n     * @param  {li} li List item to remove\n     * @param  {Event} e\n     */\n    Taggle.prototype._remove = function(li, e) {\n        var span;\n        var text;\n        var elem;\n        var index;\n\n        if (li.tagName.toLowerCase() !== 'li') {\n            li = li.parentNode;\n        }\n\n        span = li.querySelector('.taggle_text');\n        text = span.innerText || span.textContent;\n\n        if (this.settings.onBeforeTagRemove(e, text) === false) {\n            return;\n        }\n\n        li.parentNode.removeChild(li);\n\n        elem = (li.tagName.toLowerCase() === 'a') ? li.parentNode : li;\n        index = this.tag.elements.indexOf(elem);\n\n        // Going to assume the indicies match for now\n        this.tag.elements.splice(index, 1);\n        this.tag.values.splice(index, 1);\n\n        this.settings.onTagRemove(e, text);\n\n        this._focusInput();\n    };\n\n    /**\n     * Format the text for a tag\n     * @param {String} text Tag text\n     * @return {String}\n     */\n    Taggle.prototype._formatTag = function(text) {\n        return this.settings.preserveCase ? text : text.toLowerCase();\n    };\n\n    Taggle.prototype.getTags = function() {\n        return {\n            elements: this.getTagElements(),\n            values: this.getTagValues()\n        };\n    };\n\n    // @todo\n    // @deprecated\n    Taggle.prototype.getTagElements = function() {\n        return this.tag.elements;\n    };\n\n    // @todo\n    // @deprecated\n    Taggle.prototype.getTagValues = function() {\n        return [].slice.apply(this.tag.values);\n    };\n\n    Taggle.prototype.getInput = function() {\n        return this.input;\n    };\n\n    Taggle.prototype.getContainer = function() {\n        return this.container;\n    };\n\n    Taggle.prototype.add = function(text) {\n        var isArr = _isArray(text);\n\n        if (isArr) {\n            for (var i = 0, len = text.length; i < len; i++) {\n                if (typeof text[i] === 'string') {\n                    this._add(null, text[i]);\n                }\n            }\n        }\n        else {\n            this._add(null, text);\n        }\n\n        return this;\n    };\n\n    Taggle.prototype.remove = function(text, all) {\n        var len = this.tag.values.length - 1;\n        var found = false;\n\n        while (len > -1) {\n            if (this.tag.values[len] === text) {\n                found = true;\n                this._remove(this.tag.elements[len]);\n            }\n\n            if (found && !all) {\n                break;\n            }\n\n            len--;\n        }\n\n        return this;\n    };\n\n    Taggle.prototype.removeAll = function() {\n        for (var i = this.tag.values.length - 1; i >= 0; i--) {\n            this._remove(this.tag.elements[i]);\n        }\n\n        return this;\n    };\n\n    /* global define, module */\n    if (typeof define === 'function' && define.amd) {\n        // AMD\n        define([], function() {\n            return Taggle;\n        });\n    }\n    else if (typeof exports === 'object') {\n        // CommonJS\n        module.exports = Taggle;\n    }\n    else {\n        // Vanilla browser global\n        window.Taggle = Taggle;\n    }\n\n}(window, document));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/taggle/src/taggle.js\n ** module id = 9\n ** module chunks = 1 7\n **/","var __vue_script__, __vue_template__\n__vue_script__ = require(\"!!babel?{\\\"presets\\\":[\\\"/Users/ding/Documents/out2man/kil/node_modules/babel-preset-es2015/index.js\\\"],\\\"plugins\\\":[[\\\"/Users/ding/Documents/out2man/kil/node_modules/babel-plugin-transform-runtime/lib/index.js\\\"]],\\\"cacheDirectory\\\":true}!./../../../../../kil/node_modules/vue-loader/lib/selector.js?type=script&index=0!./create.vue\")\n__vue_template__ = require(\"!!vue-html-loader!./../../../../../kil/node_modules/vue-loader/lib/selector.js?type=template&index=0!./create.vue\")\nmodule.exports = __vue_script__ || {}\nif (module.exports.__esModule) module.exports = module.exports.default\nif (__vue_template__) {\n(typeof module.exports === \"function\" ? (module.exports.options || (module.exports.options = {})) : module.exports).template = __vue_template__\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./js/features/goods/create.vue\n ** module id = 91\n ** module chunks = 7\n **/","<template>\n    <div class=\"panel panel-primary good-create\">\n        <div class=\"panel-heading\">添加商品</div>\n        <div class=\"panel-body\">\n            <validator name=\"v\">\n                <div class=\"input-group\">\n                    <span class=\"input-group-addon\" id=\"productName\">商品名称</span>\n                    <input type=\"text\" class=\"form-control\" placeholder=\"请输入商品名称\" aria-describedby=\"productName\" v-model=\"model.name\" v-validate:name=\"{required:true}\" :class=\"{'red-border': $v.name && $v.name.touched && $v.name.invalid}\">\n                </div>\n                <div class=\"input-group error-msg\" v-if=\"$v.name.touched && $v.name.invalid\">\n                    <div v-if=\"$v.name.required\" class=\"red-color\">商品名称不能为空</div>\n                </div>\n                <div class=\"input-group\">\n                    <span class=\"input-group-addon\">商品属性</span>\n                    <div id=\"productAttr\" class=\"productAttr\"></div>\n                </div>\n                <div class=\"input-group\">\n                    <span class=\"input-group-addon\" id=\"productAmount\">商品链接</span>\n                    <input type=\"text\" class=\"form-control\" placeholder=\"请输入商品链接（选填）\" aria-describedby=\"productAmount\" v-model=\"model.amount\">\n                </div>\n                <div class=\"float-right btns\">\n                    <button type=\"button\" class=\"btn btn-primary\" @click=\"create\">添加</button>\n                    <button type=\"button\" class=\"btn btn-danger\" @click=\"reset\">取消</button>\n                </div>\n            </validator>\n        </div>\n    </div>\n</template>\n<script>\nimport API from '../../config/api';\nimport Alert from '../../common/alert.vue';\nimport actions from '../../vuex/actions';\nimport Taggle from 'taggle';\n\nvar Create = Vue.extend({\n    name: 'create',\n    data() {\n        return {\n            model: {\n                name: \"\"\n            },\n            loading: {\n                create: false\n            }\n        }\n    },\n    ready() {\n        this.taggle = new Taggle('productAttr', {\n            placeholder: '请输入商品属性（选填）（Enter键确认）'\n        });\n        // workaround\n        $('#productAttr').addClass('relative');\n    },\n    methods: {\n        create() {\n            var self = this;\n            self.$validate(true);\n            if (self.$v.invalid) {\n                return;\n            }\n            if (self.loading.create) {\n                return;\n            }\n            self.loading.create = !self.loading.create;\n\n            var values = self.taggle.getTagValues();\n            if (values.length > 0) {\n                self.model.attr = values;\n            }\n\n            $.ajax({\n                url: API.createGood,\n                type: 'post',\n                data: JSON.stringify(self.model),\n                success(resp) {\n                    self.alert({\n                        show: true,\n                        msg: '添加成功',\n                        type: 'success'\n                    });\n                    self.reset();\n                },\n                error(resp) {\n                    self.alert({\n                        show: true,\n                        msg: resp.responseText || '添加失败',\n                        type: 'error'\n                    });\n                }\n            }).always(() => {\n                self.loading.create = !self.loading.create;\n            })\n        },\n        reset() {\n            this.model = {\n                name: \"\"\n            };\n            this.$resetValidation();\n            this.taggle.removeAll();\n        }\n    },\n    vuex: {\n        actions: {\n            alert: actions.alert\n        }\n    }\n})\nexport default Create;\n</script>\n\n\n/** WEBPACK FOOTER **\n ** create.vue?48bd2487\n **/","module.exports = \"<div class=\\\"panel panel-primary good-create\\\"> <div class=panel-heading>添加商品</div> <div class=panel-body> <validator name=v> <div class=input-group> <span class=input-group-addon id=productName>商品名称</span> <input type=text class=form-control placeholder=请输入商品名称 aria-describedby=productName v-model=model.name v-validate:name={required:true} :class=\\\"{'red-border': $v.name && $v.name.touched && $v.name.invalid}\\\"> </div> <div class=\\\"input-group error-msg\\\" v-if=\\\"$v.name.touched && $v.name.invalid\\\"> <div v-if=$v.name.required class=red-color>商品名称不能为空</div> </div> <div class=input-group> <span class=input-group-addon>商品属性</span> <div id=productAttr class=productAttr></div> </div> <div class=input-group> <span class=input-group-addon id=productAmount>商品链接</span> <input type=text class=form-control placeholder=请输入商品链接（选填） aria-describedby=productAmount v-model=model.amount> </div> <div class=\\\"float-right btns\\\"> <button type=button class=\\\"btn btn-primary\\\" @click=create>添加</button> <button type=button class=\\\"btn btn-danger\\\" @click=reset>取消</button> </div> </validator> </div> </div>\";\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /Users/ding/Documents/out2man/kil/~/vue-html-loader!/Users/ding/Documents/out2man/kil/~/vue-loader/lib/selector.js?type=template&index=0!./js/features/goods/create.vue\n ** module id = 93\n ** module chunks = 7\n **/"],"sourceRoot":""}